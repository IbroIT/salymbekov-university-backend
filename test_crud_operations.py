#!/usr/bin/env python
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–∫
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç: Create, Read, Update, Delete –æ–ø–µ—Ä–∞—Ü–∏–∏
"""
import os
import django
from django.test.utils import setup_test_environment, teardown_test_environment
from django.test.runner import DiscoverRunner
from django.conf import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'back_su_m.settings')
django.setup()

from django.contrib.admin import site
from django.contrib.auth.models import User
from django.test import TestCase, Client
from django.urls import reverse
from django.utils import timezone
import json

class AdminCRUDTest:
    """–¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–∫"""
    
    def __init__(self):
        self.client = Client()
        self.admin_user = None
        self.results = {
            'successful_models': [],
            'failed_models': [],
            'errors': [],
            'warnings': []
        }
    
    def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            self.admin_user = User.objects.filter(is_superuser=True).first()
            if not self.admin_user:
                self.admin_user = User.objects.create_superuser(
                    'testadmin', 'test@example.com', 'testpass123'
                )
                print("   ‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            else:
                print("   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
        
        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –≤ –∞–¥–º–∏–Ω–∫–µ
        try:
            login_success = self.client.login(username='testadmin', password='testpass123')
            if not login_success:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤–æ–π—Ç–∏, –ø–æ–ø—Ä–æ–±—É–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                if User.objects.filter(is_superuser=True).exists():
                    admin = User.objects.filter(is_superuser=True).first()
                    admin.set_password('testpass123')
                    admin.save()
                    login_success = self.client.login(username=admin.username, password='testpass123')
            
            if login_success:
                print("   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –∞–¥–º–∏–Ω–∫–µ —É—Å–ø–µ—à–Ω–∞")
                return True
            else:
                print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω–∫–µ")
                return False
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def test_model_admin(self, model, admin_class):
        """–¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        app_label = model._meta.app_label
        model_name = model._meta.model_name
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º {app_label}.{model_name}...")
        
        errors = []
        warnings = []
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–æ–¥–µ–ª–∏ Django
        if app_label in ['auth', 'admin', 'sessions', 'contenttypes']:
            print(f"   ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –º–æ–¥–µ–ª—å {app_label}.{model_name}")
            return True, [], []
        
        try:
            # 1. –¢–µ—Å—Ç READ - —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
            list_url = reverse(f'admin:{app_label}_{model_name}_changelist')
            response = self.client.get(list_url)
            if response.status_code != 200:
                errors.append(f"–°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥: {response.status_code})")
            else:
                print(f"   ‚úÖ –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è")
            
            # 2. –¢–µ—Å—Ç CREATE - —Ñ–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            add_url = reverse(f'admin:{app_label}_{model_name}_add')
            response = self.client.get(add_url)
            if response.status_code != 200:
                errors.append(f"–§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–∫–æ–¥: {response.status_code})")
            else:
                print(f"   ‚úÖ –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è")
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
                test_data = self.generate_test_data(model)
                if test_data:
                    post_response = self.client.post(add_url, test_data)
                    if post_response.status_code == 302:  # –£—Å–ø–µ—à–Ω–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                        
                        # –ù–∞–π–¥–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤ UPDATE –∏ DELETE
                        try:
                            created_obj = model.objects.order_by('-id').first()
                            if created_obj:
                                # 3. –¢–µ—Å—Ç UPDATE - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                                change_url = reverse(f'admin:{app_label}_{model_name}_change', args=[created_obj.pk])
                                response = self.client.get(change_url)
                                if response.status_code != 200:
                                    errors.append(f"–§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–∫–æ–¥: {response.status_code})")
                                else:
                                    print(f"   ‚úÖ –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è")
                                
                                # 4. –¢–µ—Å—Ç DELETE - —É–¥–∞–ª–µ–Ω–∏–µ
                                delete_url = reverse(f'admin:{app_label}_{model_name}_delete', args=[created_obj.pk])
                                response = self.client.get(delete_url)
                                if response.status_code != 200:
                                    warnings.append(f"–§–æ—Ä–º–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–∫–æ–¥: {response.status_code})")
                                else:
                                    print(f"   ‚úÖ –§–æ—Ä–º–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è")
                                    
                                    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
                                    delete_response = self.client.post(delete_url, {'post': 'yes'})
                                    if delete_response.status_code == 302:
                                        print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                                    else:
                                        warnings.append("–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                        except Exception as e:
                            warnings.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ UPDATE/DELETE: {e}")
                    else:
                        warnings.append("–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)")
                else:
                    warnings.append("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
            
        except Exception as e:
            errors.append(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        
        success = len(errors) == 0
        return success, errors, warnings
    
    def generate_test_data(self, model):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏"""
        data = {}
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–ª–µ–π
        text_fields = ['title', 'name', 'description', 'summary', 'content']
        lang_suffixes = ['_ru', '_kg', '_en']
        
        for field in model._meta.get_fields():
            if hasattr(field, 'null') and hasattr(field, 'blank'):
                field_name = field.name
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
                if field.auto_created or field_name in ['id', 'created_at', 'updated_at', 'submitted_at']:
                    continue
                
                # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
                if field.__class__.__name__ in ['CharField', 'TextField']:
                    if any(text_field in field_name.lower() for text_field in text_fields):
                        data[field_name] = f"–¢–µ—Å—Ç {field_name}"
                    elif field_name == 'slug':
                        data[field_name] = 'test-slug'
                    elif field_name == 'email':
                        data[field_name] = 'test@example.com'
                    elif 'phone' in field_name.lower():
                        data[field_name] = '+996700123456'
                    else:
                        data[field_name] = f"–¢–µ—Å—Ç {field_name}"
                
                # Boolean –ø–æ–ª—è
                elif field.__class__.__name__ == 'BooleanField':
                    data[field_name] = True
                
                # –ß–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
                elif field.__class__.__name__ in ['IntegerField', 'PositiveIntegerField']:
                    data[field_name] = 1
                
                # –ü–æ–ª—è –¥–∞—Ç—ã
                elif field.__class__.__name__ in ['DateTimeField', 'DateField']:
                    if not field.auto_now and not field.auto_now_add:
                        data[field_name] = timezone.now()
        
        return data if data else None
    
    def run_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ù–ê–ß–ò–ù–ê–ï–ú CRUD –¢–ï–°–¢–´ –î–õ–Ø –í–°–ï–• –ê–î–ú–ò–ù–û–ö")
        print("=" * 60)
        
        if not self.setup():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
        for model, admin_class in site._registry.items():
            success, errors, warnings = self.test_model_admin(model, admin_class)
            
            if success:
                self.results['successful_models'].append(f"{model._meta.app_label}.{model._meta.model_name}")
            else:
                self.results['failed_models'].append(f"{model._meta.app_label}.{model._meta.model_name}")
            
            self.results['errors'].extend([f"{model._meta.app_label}.{model._meta.model_name}: {error}" for error in errors])
            self.results['warnings'].extend([f"{model._meta.app_label}.{model._meta.model_name}: {warning}" for warning in warnings])
        
        self.print_results()
    
    def print_results(self):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\n" + "=" * 60)
        print("üèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ CRUD –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        
        print(f"\n‚úÖ –£–°–ü–ï–®–ù–û ({len(self.results['successful_models'])}):")
        for model in self.results['successful_models']:
            print(f"   ‚úÖ {model}")
        
        if self.results['warnings']:
            print(f"\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ({len(self.results['warnings'])}):")
            for warning in self.results['warnings']:
                print(f"   ‚ö†Ô∏è {warning}")
        
        if self.results['errors']:
            print(f"\n‚ùå –û–®–ò–ë–ö–ò ({len(self.results['errors'])}):")
            for error in self.results['errors']:
                print(f"   ‚ùå {error}")
        
        if self.results['failed_models']:
            print(f"\nüí• –ù–ï–£–î–ê–ß–ù–´–ï –ú–û–î–ï–õ–ò ({len(self.results['failed_models'])}):")
            for model in self.results['failed_models']:
                print(f"   üí• {model}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_models = len(self.results['successful_models']) + len(self.results['failed_models'])
        success_rate = (len(self.results['successful_models']) / total_models * 100) if total_models > 0 else 0
        
        print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {total_models}")
        print(f"   –£—Å–ø–µ—à–Ω–æ: {len(self.results['successful_models'])} ({success_rate:.1f}%)")
        print(f"   –° –æ—à–∏–±–∫–∞–º–∏: {len(self.results['failed_models'])}")
        print(f"   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {len(self.results['warnings'])}")
        print(f"   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏: {len(self.results['errors'])}")
        
        if success_rate >= 80:
            print("\nüéâ –û–¢–õ–ò–ß–ù–û! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∞–¥–º–∏–Ω–æ–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        elif success_rate >= 60:
            print("\nüëç –•–û–†–û–®–û! –ë–æ–ª—å—à–∞—è —á–∞—Å—Ç—å –∞–¥–º–∏–Ω–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å—Ç—å —á—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.")
        else:
            print("\n‚ö†Ô∏è –ù–£–ñ–ù–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø! –ú–Ω–æ–≥–æ –ø—Ä–æ–±–ª–µ–º —Å –∞–¥–º–∏–Ω–∫–∞–º–∏.")

if __name__ == "__main__":
    tester = AdminCRUDTest()
    tester.run_tests()
