from django.db import models
from django.utils import timezone
from django.core.validators import MinValueValidator, MaxValueValidator


class ResearchArea(models.Model):
    """–û–±–ª–∞—Å—Ç–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π"""
    title_ru = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (—Ä—É—Å)", max_length=200)
    title_en = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (–∞–Ω–≥–ª)", max_length=200)
    title_kg = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (–∫—ã—Ä)", max_length=200)
    
    description_ru = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (—Ä—É—Å)")
    description_en = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (–∞–Ω–≥–ª)")
    description_kg = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (–∫—ã—Ä)")
    
    icon = models.CharField("–ò–∫–æ–Ω–∫–∞", max_length=100, default="üî¨")
    color = models.CharField("–¶–≤–µ—Ç", max_length=50, default="blue")
    
    projects_count = models.IntegerField("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤", default=0)
    publications_count = models.IntegerField("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π", default=0)
    researchers_count = models.IntegerField("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π", default=0)
    
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω–æ", default=True)
    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω–æ", auto_now_add=True)
    
    class Meta:
        verbose_name = "–û–±–ª–∞—Å—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π"
        verbose_name_plural = "–û–±–ª–∞—Å—Ç–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π"
        ordering = ['id']
        
    def __str__(self):
        return self.title_ru


class ResearchCenter(models.Model):
    """–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ü–µ–Ω—Ç—Ä—ã"""
    name_ru = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (—Ä—É—Å)", max_length=200)
    name_en = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (–∞–Ω–≥–ª)", max_length=200)
    name_kg = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (–∫—ã—Ä)", max_length=200)
    
    description_ru = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (—Ä—É—Å)")
    description_en = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (–∞–Ω–≥–ª)")
    description_kg = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (–∫—ã—Ä)")
    
    director_ru = models.CharField("–î–∏—Ä–µ–∫—Ç–æ—Ä (—Ä—É—Å)", max_length=200)
    director_en = models.CharField("–î–∏—Ä–µ–∫—Ç–æ—Ä (–∞–Ω–≥–ª)", max_length=200)
    director_kg = models.CharField("–î–∏—Ä–µ–∫—Ç–æ—Ä (–∫—ã—Ä)", max_length=200)
    staff_count = models.IntegerField("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", default=0)
    established_year = models.IntegerField("–ì–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω–∏—è")
    
    equipment_ru = models.TextField("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ (—Ä—É—Å)", blank=True)
    equipment_en = models.TextField("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ (–∞–Ω–≥–ª)", blank=True)
    equipment_kg = models.TextField("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ (–∫—ã—Ä)", blank=True)
    
    image = models.ImageField("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", upload_to='research/centers/', blank=True)
    website = models.URLField("–í–µ–±-—Å–∞–π—Ç", blank=True)
    email = models.EmailField("Email", blank=True)
    phone = models.CharField("–¢–µ–ª–µ—Ñ–æ–Ω", max_length=20, blank=True)
    
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω–æ", default=True)
    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω–æ", auto_now_add=True)
    
    class Meta:
        verbose_name = "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä"
        verbose_name_plural = "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ü–µ–Ω—Ç—Ä—ã"
        ordering = ['name_ru']
        
    def __str__(self):
        return self.name_ru


class Grant(models.Model):
    """–ì—Ä–∞–Ω—Ç—ã"""
    CATEGORY_CHOICES = [
        ('youth', '–ú–æ–ª–æ–¥–µ–∂–Ω—ã–µ'),
        ('international', '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ'),
        ('fundamental', '–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ'),
        ('applied', '–ü—Ä–∏–∫–ª–∞–¥–Ω—ã–µ'),
        ('innovative', '–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ'),
        ('clinical', '–ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ'),
    ]
    
    STATUS_CHOICES = [
        ('active', '–ê–∫—Ç–∏–≤–Ω—ã–π'),
        ('upcoming', '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π'),
        ('closed', '–ó–∞–∫—Ä—ã—Ç—ã–π'),
    ]
    
    title_ru = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (—Ä—É—Å)", max_length=300)
    title_en = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (–∞–Ω–≥–ª)", max_length=300)
    title_kg = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (–∫—ã—Ä)", max_length=300)
    
    organization_ru = models.CharField("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è (—Ä—É—Å)", max_length=200)
    organization_en = models.CharField("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è (–∞–Ω–≥–ª)", max_length=200)
    organization_kg = models.CharField("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è (–∫—ã—Ä)", max_length=200)
    amount = models.CharField("–°—É–º–º–∞", max_length=100)
    deadline = models.DateField("–î–µ–¥–ª–∞–π–Ω –ø–æ–¥–∞—á–∏")
    
    category = models.CharField("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", max_length=20, choices=CATEGORY_CHOICES)
    status = models.CharField("–°—Ç–∞—Ç—É—Å", max_length=20, choices=STATUS_CHOICES, default='active')
    
    duration_ru = models.CharField("–°—Ä–æ–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (—Ä—É—Å)", max_length=100)
    duration_en = models.CharField("–°—Ä–æ–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (–∞–Ω–≥–ª)", max_length=100)
    duration_kg = models.CharField("–°—Ä–æ–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (–∫—ã—Ä)", max_length=100)
    
    requirements_ru = models.TextField("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è (—Ä—É—Å)")
    requirements_en = models.TextField("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è (–∞–Ω–≥–ª)")
    requirements_kg = models.TextField("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è (–∫—ã—Ä)")
    
    description_ru = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (—Ä—É—Å)")
    description_en = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (–∞–Ω–≥–ª)")
    description_kg = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (–∫—ã—Ä)")
    
    contact = models.EmailField("–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π email")
    website = models.URLField("–í–µ–±-—Å–∞–π—Ç")
    
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω–æ", default=True)
    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω–æ", auto_now_add=True)
    updated_at = models.DateTimeField("–û–±–Ω–æ–≤–ª–µ–Ω–æ", auto_now=True)
    
    class Meta:
        verbose_name = "–ì—Ä–∞–Ω—Ç"
        verbose_name_plural = "–ì—Ä–∞–Ω—Ç—ã"
        ordering = ['-created_at']
        
    def __str__(self):
        return f"{self.title_ru} ({self.organization_ru})"
    
    @property
    def is_deadline_soon(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–∫–æ—Ä–æ –ª–∏ –¥–µ–¥–ª–∞–π–Ω (–º–µ–Ω–µ–µ 30 –¥–Ω–µ–π)"""
        days_left = (self.deadline - timezone.now().date()).days
        return days_left <= 30


class Conference(models.Model):
    """–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏"""
    STATUS_CHOICES = [
        ('registration-open', '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞'),
        ('early-bird', '–†–∞–Ω–Ω—è—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'),
        ('call-for-papers', '–ü—Ä–∏–µ–º –¥–æ–∫–ª–∞–¥–æ–≤'),
        ('completed', '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'),
    ]
    
    title_ru = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (—Ä—É—Å)", max_length=300)
    title_en = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (–∞–Ω–≥–ª)", max_length=300)
    title_kg = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (–∫—ã—Ä)", max_length=300)
    
    start_date = models.DateField("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞")
    end_date = models.DateField("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è")
    
    location_ru = models.CharField("–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è (—Ä—É—Å)", max_length=200)
    location_en = models.CharField("–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è (–∞–Ω–≥–ª)", max_length=200)
    location_kg = models.CharField("–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è (–∫—ã—Ä)", max_length=200)
    
    deadline = models.DateField("–î–µ–¥–ª–∞–π–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    website = models.URLField("–í–µ–±-—Å–∞–π—Ç")
    
    description_ru = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (—Ä—É—Å)")
    description_en = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (–∞–Ω–≥–ª)")
    description_kg = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (–∫—ã—Ä)")
    
    topics_ru = models.JSONField("–¢–µ–º—ã (—Ä—É—Å)", default=list)
    topics_en = models.JSONField("–¢–µ–º—ã (–∞–Ω–≥–ª)", default=list)
    topics_kg = models.JSONField("–¢–µ–º—ã (–∫—ã—Ä)", default=list)
    
    speakers_ru = models.JSONField("–°–ø–∏–∫–µ—Ä—ã (—Ä—É—Å)", default=list)
    speakers_en = models.JSONField("–°–ø–∏–∫–µ—Ä—ã (–∞–Ω–≥–ª)", default=list)
    speakers_kg = models.JSONField("–°–ø–∏–∫–µ—Ä—ã (–∫—ã—Ä)", default=list)
    
    speakers_count = models.IntegerField("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–∫–µ—Ä–æ–≤", default=0)
    participants_limit = models.IntegerField("–õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", null=True, blank=True)
    
    image = models.ImageField("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", upload_to='research/conferences/', blank=True)
    status = models.CharField("–°—Ç–∞—Ç—É—Å", max_length=30, choices=STATUS_CHOICES, default='registration-open')
    
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω–æ", default=True)
    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω–æ", auto_now_add=True)
    
    class Meta:
        verbose_name = "–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è"
        verbose_name_plural = "–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏"
        ordering = ['start_date']
        
    def __str__(self):
        return f"{self.title_ru} ({self.start_date})"
    
    @property
    def is_upcoming(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–µ–¥—Å—Ç–æ—è—â–∞—è –ª–∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è"""
        return self.start_date > timezone.now().date()


class Publication(models.Model):
    """–ù–∞—É—á–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    PUBLICATION_TYPE_CHOICES = [
        ('article', '–°—Ç–∞—Ç—å—è'),
        ('book', '–ö–Ω–∏–≥–∞'),
        ('conference', '–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è'),
        ('patent', '–ü–∞—Ç–µ–Ω—Ç'),
        ('thesis', '–î–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏—è'),
    ]
    
    title_ru = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (—Ä—É—Å)", max_length=500)
    title_en = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (–∞–Ω–≥–ª)", max_length=500)
    title_kg = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (–∫—ã—Ä)", max_length=500)
    
    authors_ru = models.CharField("–ê–≤—Ç–æ—Ä—ã (—Ä—É—Å)", max_length=500)
    authors_en = models.CharField("–ê–≤—Ç–æ—Ä—ã (–∞–Ω–≥–ª)", max_length=500)
    authors_kg = models.CharField("–ê–≤—Ç–æ—Ä—ã (–∫—ã—Ä)", max_length=500)
    journal = models.CharField("–ñ—É—Ä–Ω–∞–ª/–ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ", max_length=300)
    
    publication_date = models.DateField("–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
    publication_type = models.CharField("–¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", max_length=20, choices=PUBLICATION_TYPE_CHOICES, default='article')
    
    impact_factor = models.DecimalField("–ò–º–ø–∞–∫—Ç-—Ñ–∞–∫—Ç–æ—Ä", max_digits=5, decimal_places=2, null=True, blank=True)
    citations_count = models.IntegerField("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π", default=0)
    
    doi = models.CharField("DOI", max_length=100, blank=True)
    url = models.URLField("–°—Å—ã–ª–∫–∞", blank=True)
    
    abstract_ru = models.TextField("–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è (—Ä—É—Å)", blank=True)
    abstract_en = models.TextField("–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è (–∞–Ω–≥–ª)", blank=True)
    abstract_kg = models.TextField("–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è (–∫—ã—Ä)", blank=True)
    
    keywords_ru = models.JSONField("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—Ä—É—Å)", default=list)
    keywords_en = models.JSONField("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–∞–Ω–≥–ª)", default=list)
    keywords_kg = models.JSONField("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–∫—ã—Ä)", default=list)
    
    research_area = models.ForeignKey(ResearchArea, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–û–±–ª–∞—Å—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π")
    research_center = models.ForeignKey(ResearchCenter, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä")
    
    file = models.FileField("–§–∞–π–ª", upload_to='research/publications/', blank=True)
    
    is_featured = models.BooleanField("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è", default=False)
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω–æ", default=True)
    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω–æ", auto_now_add=True)
    
    class Meta:
        verbose_name = "–ü—É–±–ª–∏–∫–∞—Ü–∏—è"
        verbose_name_plural = "–ü—É–±–ª–∏–∫–∞—Ü–∏–∏"
        ordering = ['-publication_date']
        
    def __str__(self):
        return f"{self.title_ru} ({self.publication_date.year})"


class GrantApplication(models.Model):
    """–ó–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä–∞–Ω—Ç—ã"""
    STATUS_CHOICES = [
        ('pending', '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏'),
        ('approved', '–û–¥–æ–±—Ä–µ–Ω–æ'),
        ('rejected', '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'),
    ]
    
    grant = models.ForeignKey(Grant, on_delete=models.CASCADE, verbose_name="–ì—Ä–∞–Ω—Ç")
    
    project_title = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", max_length=300)
    principal_investigator = models.CharField("–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞", max_length=200)
    email = models.EmailField("Email")
    phone = models.CharField("–¢–µ–ª–µ—Ñ–æ–Ω", max_length=20, blank=True)
    department = models.CharField("–ö–∞—Ñ–µ–¥—Ä–∞/–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è", max_length=200)
    team_members = models.TextField("–ß–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã", blank=True)
    
    project_description = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
    budget = models.IntegerField("–ë—é–¥–∂–µ—Ç", validators=[MinValueValidator(0)])
    timeline = models.IntegerField("–°—Ä–æ–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (–º–µ—Å—è—Ü—ã)", validators=[MinValueValidator(1)])
    expected_results = models.TextField("–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    
    files = models.FileField("–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã", upload_to='research/applications/', blank=True)
    
    status = models.CharField("–°—Ç–∞—Ç—É—Å", max_length=20, choices=STATUS_CHOICES, default='pending')
    admin_notes = models.TextField("–ó–∞–º–µ—Ç–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", blank=True)
    
    submitted_at = models.DateTimeField("–ü–æ–¥–∞–Ω–æ", auto_now_add=True)
    reviewed_at = models.DateTimeField("–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ", null=True, blank=True)
    
    class Meta:
        verbose_name = "–ó–∞—è–≤–∫–∞ –Ω–∞ –≥—Ä–∞–Ω—Ç"
        verbose_name_plural = "–ó–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä–∞–Ω—Ç—ã"
        ordering = ['-submitted_at']
        
    def __str__(self):
        return f"{self.project_title} - {self.principal_investigator}"
