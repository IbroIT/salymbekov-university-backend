from django.db import models
from django.utils.translation import gettext_lazy as _
from django.core.validators import RegexValidator
from django.urls import reverse


class CareerCategory(models.Model):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π"""
    CATEGORY_CHOICES = [
        ('academic', _('–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ')),
        ('administrative', _('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ')),
        ('technical', _('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ')),
        ('service', _('–û–±—Å–ª—É–∂–∏–≤–∞—é—â–∏–µ')),
    ]
    
    name = models.CharField(
        max_length=50,
        choices=CATEGORY_CHOICES,
        unique=True,
        verbose_name=_('–ö–∞—Ç–µ–≥–æ—Ä–∏—è')
    )
    display_name_ru = models.CharField(
        max_length=100,
        verbose_name=_('–ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ä—É—Å—Å–∫–∏–π)')
    )
    display_name_kg = models.CharField(
        max_length=100,
        verbose_name=_('–ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫—ã—Ä–≥—ã–∑—Å–∫–∏–π)')
    )
    display_name_en = models.CharField(
        max_length=100,
        verbose_name=_('–ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)')
    )
    icon = models.CharField(
        max_length=10,
        default='üíº',
        verbose_name=_('–ò–∫–æ–Ω–∫–∞')
    )
    description_ru = models.TextField(
        blank=True,
        verbose_name=_('–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ä—É—Å—Å–∫–∏–π)')
    )
    description_kg = models.TextField(
        blank=True,
        verbose_name=_('–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∫—ã—Ä–≥—ã–∑—Å–∫–∏–π)')
    )
    description_en = models.TextField(
        blank=True,
        verbose_name=_('–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)')
    )
    is_active = models.BooleanField(
        default=True,
        verbose_name=_('–ê–∫—Ç–∏–≤–Ω–∞')
    )
    order = models.PositiveIntegerField(
        default=0,
        verbose_name=_('–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏')
    )
    
    class Meta:
        verbose_name = _('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∫–∞—Ä—å–µ—Ä—ã')
        verbose_name_plural = _('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞—Ä—å–µ—Ä—ã')
        ordering = ['order', 'display_name_ru']
    
    def __str__(self):
        return self.display_name_ru


class Department(models.Model):
    """–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞"""
    name_ru = models.CharField(
        max_length=200,
        verbose_name=_('–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (—Ä—É—Å—Å–∫–∏–π)')
    )
    name_kg = models.CharField(
        max_length=200,
        verbose_name=_('–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (–∫—ã—Ä–≥—ã–∑—Å–∫–∏–π)')
    )
    name_en = models.CharField(
        max_length=200,
        verbose_name=_('–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)')
    )
    short_name = models.CharField(
        max_length=50,
        blank=True,
        verbose_name=_('–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')
    )
    description_ru = models.TextField(
        blank=True,
        verbose_name=_('–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (—Ä—É—Å—Å–∫–∏–π)')
    )
    description_kg = models.TextField(
        blank=True,
        verbose_name=_('–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (–∫—ã—Ä–≥—ã–∑—Å–∫–∏–π)')
    )
    description_en = models.TextField(
        blank=True,
        verbose_name=_('–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)')
    )
    head_name_ru = models.CharField(
        max_length=200,
        blank=True,
        verbose_name=_('–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å (—Ä—É—Å—Å–∫–∏–π)')
    )
    head_name_kg = models.CharField(
        max_length=200,
        blank=True,
        verbose_name=_('–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å (–∫—ã—Ä–≥—ã–∑—Å–∫–∏–π)')
    )
    head_name_en = models.CharField(
        max_length=200,
        blank=True,
        verbose_name=_('–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)')
    )
    contact_email = models.EmailField(
        blank=True,
        verbose_name=_('Email –¥–ª—è —Å–≤—è–∑–∏')
    )
    phone_regex = RegexValidator(
        regex=r'^\+?1?\d{9,15}$',
        message=_("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '+996123456789'")
    )
    contact_phone = models.CharField(
        validators=[phone_regex],
        max_length=17,
        blank=True,
        verbose_name=_('–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏')
    )
    is_active = models.BooleanField(
        default=True,
        verbose_name=_('–ê–∫—Ç–∏–≤–Ω–æ')
    )
    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name=_('–°–æ–∑–¥–∞–Ω–æ')
    )
    
    class Meta:
        verbose_name = _('–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ')
        verbose_name_plural = _('–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è')
        ordering = ['name_ru']
    
    def __str__(self):
        return self.name_ru


class Vacancy(models.Model):
    """–ú–æ–¥–µ–ª—å –≤–∞–∫–∞–Ω—Å–∏–π"""
    EMPLOYMENT_TYPE_CHOICES = [
        ('full_time', _('–ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å')),
        ('part_time', _('–ù–µ–ø–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å')),
        ('contract', _('–ö–æ–Ω—Ç—Ä–∞–∫—Ç')),
        ('internship', _('–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞')),
        ('temporary', _('–í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞')),
    ]
    
    STATUS_CHOICES = [
        ('draft', _('–ß–µ—Ä–Ω–æ–≤–∏–∫')),
        ('published', _('–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ')),
        ('closed', _('–ó–∞–∫—Ä—ã—Ç–æ')),
        ('archived', _('–ê—Ä—Ö–∏–≤')),
    ]
    
    title_ru = models.CharField(
        max_length=200,
        verbose_name=_('–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ (—Ä—É—Å—Å–∫–∏–π)')
    )
    title_kg = models.CharField(
        max_length=200,
        verbose_name=_('–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ (–∫—ã—Ä–≥—ã–∑—Å–∫–∏–π)')
    )
    title_en = models.CharField(
        max_length=200,
        verbose_name=_('–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)')
    )
    slug = models.SlugField(
        max_length=250,
        unique=True,
        blank=True,
        verbose_name=_('URL')
    )
    category = models.ForeignKey(
        CareerCategory,
        on_delete=models.CASCADE,
        verbose_name=_('–ö–∞—Ç–µ–≥–æ—Ä–∏—è')
    )
    department = models.ForeignKey(
        Department,
        on_delete=models.CASCADE,
        verbose_name=_('–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ')
    )
    location_ru = models.CharField(
        max_length=100,
        default='–ë–∏—à–∫–µ–∫',
        verbose_name=_('–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã (—Ä—É—Å—Å–∫–∏–π)')
    )
    location_kg = models.CharField(
        max_length=100,
        default='–ë–∏—à–∫–µ–∫',
        verbose_name=_('–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã (–∫—ã—Ä–≥—ã–∑—Å–∫–∏–π)')
    )
    location_en = models.CharField(
        max_length=100,
        default='Bishkek',
        verbose_name=_('–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)')
    )
    employment_type = models.CharField(
        max_length=20,
        choices=EMPLOYMENT_TYPE_CHOICES,
        default='full_time',
        verbose_name=_('–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏')
    )
    salary_min = models.PositiveIntegerField(
        null=True,
        blank=True,
        verbose_name=_('–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç (—Å–æ–º)')
    )
    salary_max = models.PositiveIntegerField(
        null=True,
        blank=True,
        verbose_name=_('–ó–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ (—Å–æ–º)')
    )
    experience_years_ru = models.CharField(
        max_length=50,
        blank=True,
        verbose_name=_('–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (—Ä—É—Å—Å–∫–∏–π)')
    )
    experience_years_kg = models.CharField(
        max_length=50,
        blank=True,
        verbose_name=_('–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–∫—ã—Ä–≥—ã–∑—Å–∫–∏–π)')
    )
    experience_years_en = models.CharField(
        max_length=50,
        blank=True,
        verbose_name=_('–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)')
    )
    education_level_ru = models.CharField(
        max_length=200,
        blank=True,
        verbose_name=_('–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é (—Ä—É—Å—Å–∫–∏–π)')
    )
    education_level_kg = models.CharField(
        max_length=200,
        blank=True,
        verbose_name=_('–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é (–∫—ã—Ä–≥—ã–∑—Å–∫–∏–π)')
    )
    education_level_en = models.CharField(
        max_length=200,
        blank=True,
        verbose_name=_('–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)')
    )
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
    short_description_ru = models.TextField(
        verbose_name=_('–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (—Ä—É—Å—Å–∫–∏–π)')
    )
    short_description_kg = models.TextField(
        verbose_name=_('–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∫—ã—Ä–≥—ã–∑—Å–∫–∏–π)')
    )
    short_description_en = models.TextField(
        verbose_name=_('–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)')
    )
    description_ru = models.TextField(
        verbose_name=_('–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (—Ä—É—Å—Å–∫–∏–π)')
    )
    description_kg = models.TextField(
        verbose_name=_('–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∫—ã—Ä–≥—ã–∑—Å–∫–∏–π)')
    )
    description_en = models.TextField(
        verbose_name=_('–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)')
    )
    responsibilities_ru = models.TextField(
        help_text=_('–ö–∞–∂–¥–æ–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏'),
        verbose_name=_('–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ (—Ä—É—Å—Å–∫–∏–π)')
    )
    responsibilities_kg = models.TextField(
        help_text=_('–ö–∞–∂–¥–æ–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏'),
        verbose_name=_('–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ (–∫—ã—Ä–≥—ã–∑—Å–∫–∏–π)')
    )
    responsibilities_en = models.TextField(
        help_text=_('–ö–∞–∂–¥–æ–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏'),
        verbose_name=_('–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)')
    )
    requirements_ru = models.TextField(
        help_text=_('–ö–∞–∂–¥–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏'),
        verbose_name=_('–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è (—Ä—É—Å—Å–∫–∏–π)')
    )
    requirements_kg = models.TextField(
        help_text=_('–ö–∞–∂–¥–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏'),
        verbose_name=_('–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è (–∫—ã—Ä–≥—ã–∑—Å–∫–∏–π)')
    )
    requirements_en = models.TextField(
        help_text=_('–ö–∞–∂–¥–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏'),
        verbose_name=_('–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)')
    )
    conditions_ru = models.TextField(
        blank=True,
        help_text=_('–ö–∞–∂–¥–æ–µ —É—Å–ª–æ–≤–∏–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏'),
        verbose_name=_('–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã (—Ä—É—Å—Å–∫–∏–π)')
    )
    conditions_kg = models.TextField(
        blank=True,
        help_text=_('–ö–∞–∂–¥–æ–µ —É—Å–ª–æ–≤–∏–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏'),
        verbose_name=_('–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã (–∫—ã—Ä–≥—ã–∑—Å–∫–∏–π)')
    )
    conditions_en = models.TextField(
        blank=True,
        help_text=_('–ö–∞–∂–¥–æ–µ —É—Å–ª–æ–≤–∏–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏'),
        verbose_name=_('–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)')
    )
    
    # –ú–µ—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    tags = models.CharField(
        max_length=500,
        blank=True,
        help_text=_('–¢–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é'),
        verbose_name=_('–¢–µ–≥–∏')
    )
    status = models.CharField(
        max_length=20,
        choices=STATUS_CHOICES,
        default='draft',
        verbose_name=_('–°—Ç–∞—Ç—É—Å')
    )
    is_featured = models.BooleanField(
        default=False,
        verbose_name=_('–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –≤–∞–∫–∞–Ω—Å–∏—è')
    )
    
    # –î–∞—Ç—ã
    posted_date = models.DateTimeField(
        auto_now_add=True,
        verbose_name=_('–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏')
    )
    deadline = models.DateField(
        null=True,
        blank=True,
        verbose_name=_('–ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫')
    )
    updated_at = models.DateTimeField(
        auto_now=True,
        verbose_name=_('–û–±–Ω–æ–≤–ª–µ–Ω–æ')
    )
    
    # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    contact_person = models.CharField(
        max_length=200,
        blank=True,
        verbose_name=_('–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ')
    )
    contact_email = models.EmailField(
        blank=True,
        verbose_name=_('Email –¥–ª—è –∑–∞—è–≤–æ–∫')
    )
    contact_phone = models.CharField(
        max_length=17,
        blank=True,
        verbose_name=_('–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏')
    )
    
    # –°—á–µ—Ç—á–∏–∫–∏
    views_count = models.PositiveIntegerField(
        default=0,
        verbose_name=_('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤')
    )
    applications_count = models.PositiveIntegerField(
        default=0,
        verbose_name=_('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫')
    )
    
    class Meta:
        verbose_name = _('–í–∞–∫–∞–Ω—Å–∏—è')
        verbose_name_plural = _('–í–∞–∫–∞–Ω—Å–∏–∏')
        ordering = ['-posted_date', '-is_featured']
        indexes = [
            models.Index(fields=['status', 'category']),
            models.Index(fields=['posted_date']),
            models.Index(fields=['deadline']),
        ]
    
    def __str__(self):
        return self.title_ru
    
    def get_absolute_url(self):
        return reverse('careers:vacancy_detail', kwargs={'slug': self.slug})
    
    def get_tags_list(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤"""
        if self.tags:
            return [tag.strip() for tag in self.tags.split(',')]
        return []
    
    def get_responsibilities_list(self, language='ru'):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞"""
        if language == 'ky':
            language = 'kg'  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ky –≤ kg
        
        field_name = f"responsibilities_{language}"
        responsibilities_text = getattr(self, field_name, None)
        
        # –ï—Å–ª–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π –∫–∞–∫ fallback
        if not responsibilities_text:
            responsibilities_text = self.responsibilities_ru
        
        if responsibilities_text:
            return [resp.strip() for resp in responsibilities_text.split('\n') if resp.strip()]
        return []
    
    def get_requirements_list(self, language='ru'):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞"""
        if language == 'ky':
            language = 'kg'  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ky –≤ kg
        
        field_name = f"requirements_{language}"
        requirements_text = getattr(self, field_name, None)
        
        # –ï—Å–ª–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π –∫–∞–∫ fallback
        if not requirements_text:
            requirements_text = self.requirements_ru
        
        if requirements_text:
            return [req.strip() for req in requirements_text.split('\n') if req.strip()]
        return []
    
    def get_conditions_list(self, language='ru'):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å–ª–æ–≤–∏–π —Ä–∞–±–æ—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞"""
        if language == 'ky':
            language = 'kg'  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ky –≤ kg
        
        field_name = f"conditions_{language}"
        conditions_text = getattr(self, field_name, None)
        
        # –ï—Å–ª–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π –∫–∞–∫ fallback
        if not conditions_text:
            conditions_text = self.conditions_ru
        
        if conditions_text:
            return [cond.strip() for cond in conditions_text.split('\n') if cond.strip()]
        return []
    
    def get_salary_display(self):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã"""
        if self.salary_min and self.salary_max:
            return f"{self.salary_min:,} - {self.salary_max:,} —Å–æ–º"
        elif self.salary_min:
            return f"–æ—Ç {self.salary_min:,} —Å–æ–º"
        elif self.salary_max:
            return f"–¥–æ {self.salary_max:,} —Å–æ–º"
        return _("–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏")
    
    @property
    def is_deadline_soon(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–∫–æ—Ä–æ –ª–∏ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å—Ä–æ–∫ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫"""
        if not self.deadline:
            return False
        
        from datetime import date, timedelta
        today = date.today()
        return self.deadline - today <= timedelta(days=7) and self.deadline > today
    
    @property
    def is_expired(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫"""
        if not self.deadline:
            return False
        
        from datetime import date
        return self.deadline < date.today()


class VacancyApplication(models.Model):
    """–ó–∞—è–≤–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏"""
    vacancy = models.ForeignKey(
        Vacancy,
        on_delete=models.CASCADE,
        related_name='applications',
        verbose_name=_('–í–∞–∫–∞–Ω—Å–∏—è')
    )
    first_name = models.CharField(
        max_length=100,
        verbose_name=_('–ò–º—è')
    )
    last_name = models.CharField(
        max_length=100,
        verbose_name=_('–§–∞–º–∏–ª–∏—è')
    )
    email = models.EmailField(
        verbose_name=_('Email')
    )
    phone = models.CharField(
        max_length=17,
        verbose_name=_('–¢–µ–ª–µ—Ñ–æ–Ω')
    )
    cover_letter = models.TextField(
        verbose_name=_('–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ')
    )
    resume = models.FileField(
        upload_to='careers/resumes/%Y/%m/',
        verbose_name=_('–†–µ–∑—é–º–µ')
    )
    additional_info = models.TextField(
        blank=True,
        verbose_name=_('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    )
    
    # –ú–µ—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    submitted_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name=_('–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏')
    )
    status = models.CharField(
        max_length=20,
        choices=[
            ('new', _('–ù–æ–≤–∞—è')),
            ('reviewed', _('–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞')),
            ('interview', _('–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ')),
            ('accepted', _('–ü—Ä–∏–Ω—è—Ç–∞')),
            ('rejected', _('–û—Ç–∫–ª–æ–Ω–µ–Ω–∞')),
        ],
        default='new',
        verbose_name=_('–°—Ç–∞—Ç—É—Å')
    )
    notes = models.TextField(
        blank=True,
        verbose_name=_('–ó–∞–º–µ—Ç–∫–∏ HR')
    )
    
    class Meta:
        verbose_name = _('–ó–∞—è–≤–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é')
        verbose_name_plural = _('–ó–∞—è–≤–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏')
        ordering = ['-submitted_at']
        unique_together = ['vacancy', 'email']
    
    def __str__(self):
        return f"{self.first_name} {self.last_name} - {self.vacancy.title_ru}"
    
    def get_full_name(self):
        return f"{self.first_name} {self.last_name}"
