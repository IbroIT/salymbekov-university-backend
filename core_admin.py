from django.contrib import admin
from django.contrib.admin import AdminSite
from django.utils.html import format_html
from django.urls import reverse
from django.utils.safestring import mark_safe

class SalymbekovAdminSite(AdminSite):
    site_header = "üéì –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –°–∞–ª—ã–º–±–µ–∫–æ–≤–∞"
    site_title = "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
    index_title = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å"
    
    def each_context(self, request):
        """
        Return a dictionary of variables to put in the template context for
        *every* page in the admin site.
        """
        context = super().each_context(request)
        context.update({
            'site_header': self.site_header,
            'site_title': self.site_title,
            'index_title': self.index_title,
        })
        return context

# –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–º–∏–Ω–∫–∏
admin_site = SalymbekovAdminSite(name='salymbekov_admin')

class BaseModelAdmin(admin.ModelAdmin):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –∞–¥–º–∏–Ω–∫–∏ —Å –æ–±—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    
    def get_list_display(self, request):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ is_active"""
        list_display = list(super().get_list_display(request))
        if hasattr(self.model, 'is_active') and 'colored_status' not in list_display:
            if 'is_active' in list_display:
                list_display[list_display.index('is_active')] = 'colored_status'
            else:
                list_display.append('colored_status')
        return tuple(list_display)
    
    def colored_status(self, obj):
        """–¶–≤–µ—Ç–Ω–æ–π —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if hasattr(obj, 'is_active'):
            if obj.is_active:
                return format_html(
                    '<span style="color: #059669; font-weight: bold;">‚úÖ –ê–∫—Ç–∏–≤–Ω–æ</span>'
                )
            else:
                return format_html(
                    '<span style="color: #dc2626; font-weight: bold;">‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–æ</span>'
                )
        return '-'
    colored_status.short_description = '–°—Ç–∞—Ç—É—Å'
    
    def get_readonly_fields(self, request, obj=None):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–ª–∞–µ–º –ø–æ–ª—è created_at –∏ updated_at —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è"""
        readonly_fields = list(super().get_readonly_fields(request, obj))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        for field in ['created_at', 'updated_at', 'date_created', 'date_updated']:
            if hasattr(self.model, field) and field not in readonly_fields:
                readonly_fields.append(field)
                
        return readonly_fields
    
    class Media:
        css = {
            'all': ('admin/css/custom_admin.css',)
        }

# –ú–∏–∫—Å–∏–Ω –¥–ª—è –º–æ–¥–µ–ª–µ–π —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
class TranslationAdminMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏"""
    
    def get_fieldsets(self, request, obj=None):
        """–ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—è –ø–æ —è–∑—ã–∫–∞–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞"""
        fieldsets = super().get_fieldsets(request, obj)
        
        if hasattr(self.model, 'title_ru'):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
            # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
            language_fieldsets = [
                ('üá∑üá∫ –†—É—Å—Å–∫–∏–π', {
                    'fields': self._get_language_fields('ru'),
                    'classes': ('collapse',)
                }),
                ('üá∞üá¨ –ö—ã—Ä–≥—ã–∑—á–∞', {
                    'fields': self._get_language_fields('ky'),
                    'classes': ('collapse',)
                }),
                ('üá∫üá∏ English', {
                    'fields': self._get_language_fields('en'),
                    'classes': ('collapse',)
                }),
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            main_fields = self._get_non_language_fields()
            if main_fields:
                main_fieldset = ('üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
                    'fields': main_fields
                })
                return (main_fieldset,) + tuple(language_fieldsets)
            else:
                return tuple(language_fieldsets)
        
        return fieldsets
    
    def _get_language_fields(self, lang_code):
        """–ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞"""
        fields = []
        for field in self.model._meta.get_fields():
            if field.name.endswith(f'_{lang_code}'):
                fields.append(field.name)
        return fields
    
    def _get_non_language_fields(self):
        """–ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏"""
        fields = []
        excluded_suffixes = ['_ru', '_ky', '_en']
        
        for field in self.get_fields(None):
            if not any(field.endswith(suffix) for suffix in excluded_suffixes):
                fields.append(field)
        return fields

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∞–¥–º–∏–Ω–∫–µ
def image_preview(image_field):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∫–∏"""
    def preview(obj):
        if image_field and hasattr(obj, image_field.name):
            image = getattr(obj, image_field.name)
            if image:
                return format_html(
                    '<img src="{}" style="max-height: 100px; max-width: 150px; '
                    'border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);" />',
                    image.url
                )
        return "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    preview.short_description = "–ü—Ä–µ–≤—å—é"
    return preview

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç
def format_date_field(field_name, title="–î–∞—Ç–∞"):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∫—Ä–∞—Å–∏–≤–æ"""
    def formatted_date(obj):
        if hasattr(obj, field_name):
            date_value = getattr(obj, field_name)
            if date_value:
                return format_html(
                    '<span style="color: #6366f1; font-weight: 500;">üìÖ {}</span>',
                    date_value.strftime("%d.%m.%Y –≤ %H:%M")
                )
        return "-"
    formatted_date.short_description = title
    formatted_date.admin_order_field = field_name
    return formatted_date
