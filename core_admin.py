from django.contrib import admin
from django.contrib.admin import AdminSite
from django.utils.html import format_html
from django.urls import reverse
from django.utils.safestring import mark_safe
from django.utils import timezone

class SalymbekovAdminSite(AdminSite):
    site_header = "üéì –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –°–∞–ª—ã–º–±–µ–∫–æ–≤–∞"
    site_title = "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
    index_title = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å"
    
    def each_context(self, request):
        context = super().each_context(request)
        context.update({
            'site_header': self.site_header,
            'site_title': self.site_title,
            'index_title': self.index_title,
        })
        return context

# –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–º–∏–Ω–∫–∏
admin_site = SalymbekovAdminSite(name='salymbekov_admin')

class BaseModelAdmin(admin.ModelAdmin):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –∞–¥–º–∏–Ω–∫–∏ —Å –æ–±—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    
    def get_readonly_fields(self, request, obj=None):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–ª–∞–µ–º created_at, updated_at readonly"""
        readonly_fields = list(super().get_readonly_fields(request, obj))
        
        # –î–æ–±–∞–≤–ª—è–µ–º timestamp –ø–æ–ª—è
        for field in ['created_at', 'updated_at', 'date_created', 'date_updated', 'submitted_at']:
            if hasattr(self.model, field) and field not in readonly_fields:
                readonly_fields.append(field)
                
        return readonly_fields
    
    def get_list_display(self, request):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ is_active"""
        list_display = list(super().get_list_display(request))
        if hasattr(self.model, 'is_active') and 'colored_status' not in list_display:
            if 'is_active' in list_display:
                list_display[list_display.index('is_active')] = 'colored_status'
            else:
                list_display.append('colored_status')
        return tuple(list_display)
    
    def colored_status(self, obj):
        """–¶–≤–µ—Ç–Ω–æ–π —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if hasattr(obj, 'is_active'):
            if obj.is_active:
                return format_html(
                    '<span style="color: #059669; font-weight: bold;">‚úÖ –ê–∫—Ç–∏–≤–Ω–æ</span>'
                )
            else:
                return format_html(
                    '<span style="color: #dc2626; font-weight: bold;">‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–æ</span>'
                )
        return '-'
    colored_status.short_description = '–°—Ç–∞—Ç—É—Å'
    
    class Media:
        css = {
            'all': ('admin/css/custom_admin.css',)
        }

# –ú–∏–∫—Å–∏–Ω –¥–ª—è –º–æ–¥–µ–ª–µ–π —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
class TranslationAdminMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏"""
    pass

# –£—Ç–∏–ª–∏—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def image_preview(obj, field_name='image', max_height=100):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not obj or not hasattr(obj, field_name):
        return mark_safe('<span style="color: #94a3b8;">–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</span>')
    
    image_field = getattr(obj, field_name)
    if not image_field:
        return mark_safe('<span style="color: #94a3b8;">–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</span>')
        
    try:
        return format_html(
            '<img src="{}" style="max-height: {}px; max-width: 150px; '
            'border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); '
            'object-fit: cover;" />',
            image_field.url, max_height
        )
    except:
        return mark_safe('<span style="color: #ef4444;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</span>')

def format_date_field(obj, field_name, date_format='%d.%m.%Y %H:%M'):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã"""
    if not obj or not hasattr(obj, field_name):
        return '-'
        
    date_field = getattr(obj, field_name)
    if not date_field:
        return '-'
        
    try:
        if hasattr(date_field, 'strftime'):
            return date_field.strftime(date_format)
        return str(date_field)
    except:
        return '-'

def status_badges(obj, field_mapping=None):
    """–°–æ–∑–¥–∞–µ—Ç —Ü–≤–µ—Ç–Ω—ã–µ –±–µ–π–¥–∂–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤"""
    if not field_mapping:
        field_mapping = {
            'is_published': ('‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ', '‚ùå –ß–µ—Ä–Ω–æ–≤–∏–∫'),
            'is_featured': ('‚≠ê –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ', ''),
            'is_pinned': ('üìå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ', ''),
            'is_active': ('‚úÖ –ê–∫—Ç–∏–≤–Ω–æ', '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–æ')
        }
    
    badges = []
    for field, (active_text, inactive_text) in field_mapping.items():
        if hasattr(obj, field):
            value = getattr(obj, field)
            if value and active_text:
                badges.append(f'<span style="background: #10b981; color: white; padding: 2px 6px; border-radius: 12px; font-size: 11px; margin: 1px;">{active_text}</span>')
            elif not value and inactive_text:
                badges.append(f'<span style="background: #ef4444; color: white; padding: 2px 6px; border-radius: 12px; font-size: 11px; margin: 1px;">{inactive_text}</span>')
    
    return mark_safe(' '.join(badges)) if badges else '-'
