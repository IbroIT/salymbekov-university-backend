#!/usr/bin/env python
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–∫ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""
import os
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'back_su_m.settings')
django.setup()

from django.contrib import admin
from django.apps import apps

def test_all_admins():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∞–¥–º–∏–Ω–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫"""
    print("=== –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ê–î–ú–ò–ù–û–ö ===\n")
    
    errors = []
    warnings = []
    successes = []
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∫–∏
    for model, admin_class in admin.site._registry.items():
        app_label = model._meta.app_label
        model_name = model.__name__
        admin_name = admin_class.__class__.__name__
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º: {app_label}.{model_name} -> {admin_name}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º list_display
            if hasattr(admin_class, 'list_display'):
                list_display = admin_class.list_display
                for field in list_display:
                    if isinstance(field, str) and not hasattr(model, field) and not hasattr(admin_class, field):
                        errors.append(f"‚ùå {app_label}.{model_name}: –ü–æ–ª–µ '{field}' –≤ list_display –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        continue
                        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º fieldsets
            if hasattr(admin_class, 'fieldsets'):
                fieldsets = admin_class.fieldsets
                for fieldset_name, fieldset_data in fieldsets:
                    fields = fieldset_data.get('fields', [])
                    for field_group in fields:
                        if isinstance(field_group, (list, tuple)):
                            for field in field_group:
                                if not hasattr(model, field) and not hasattr(admin_class, field):
                                    errors.append(f"‚ùå {app_label}.{model_name}: –ü–æ–ª–µ '{field}' –≤ fieldsets –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        elif isinstance(field_group, str):
                            if not hasattr(model, field_group) and not hasattr(admin_class, field_group):
                                errors.append(f"‚ùå {app_label}.{model_name}: –ü–æ–ª–µ '{field_group}' –≤ fieldsets –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º readonly_fields
            if hasattr(admin_class, 'readonly_fields'):
                readonly_fields = admin_class.readonly_fields
                for field in readonly_fields:
                    if not hasattr(model, field) and not hasattr(admin_class, field):
                        errors.append(f"‚ùå {app_label}.{model_name}: –ü–æ–ª–µ '{field}' –≤ readonly_fields –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º search_fields
            if hasattr(admin_class, 'search_fields'):
                search_fields = admin_class.search_fields
                for field in search_fields:
                    # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã –ø–æ–∏—Å–∫–∞
                    clean_field = field.replace('__icontains', '').replace('__exact', '').replace('__startswith', '')
                    if not hasattr(model, clean_field):
                        errors.append(f"‚ùå {app_label}.{model_name}: –ü–æ–ª–µ '{clean_field}' –≤ search_fields –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            if not any(error.startswith(f"‚ùå {app_label}.{model_name}:") for error in errors[-10:]):
                successes.append(f"‚úÖ {app_label}.{model_name}: –ê–¥–º–∏–Ω–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                
        except Exception as e:
            errors.append(f"‚ùå {app_label}.{model_name}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ - {str(e)}")
    
    print("\n" + "="*60)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:")
    print("="*60)
    
    if successes:
        print(f"\n‚úÖ –£–°–ü–ï–®–ù–û ({len(successes)}):")
        for success in successes:
            print(f"   {success}")
    
    if warnings:
        print(f"\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ({len(warnings)}):")
        for warning in warnings:
            print(f"   {warning}")
    
    if errors:
        print(f"\n‚ùå –û–®–ò–ë–ö–ò ({len(errors)}):")
        for error in errors:
            print(f"   {error}")
    else:
        print(f"\nüéâ –û–¢–õ–ò–ß–ù–û! –í—Å–µ –∞–¥–º–∏–Ω–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ –æ—à–∏–±–æ–∫!")
        
    print(f"\n–ò—Ç–æ–≥–æ: {len(successes)} —É—Å–ø–µ—à–Ω–æ, {len(warnings)} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π, {len(errors)} –æ—à–∏–±–æ–∫")

if __name__ == "__main__":
    test_all_admins()
